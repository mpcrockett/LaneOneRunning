import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from './store';
import { LoginFormValues, RegisterFormValues, User } from '../utils/Types';
import axios from 'axios';

export interface userState {
  loggedIn: boolean;
  status: string | null,
  user: {
    username: string | null
  },
  error: {} | null | unknown
}

const initialState: userState = {
  loggedIn: false,
  status: null,
  user: {
    username: null
  },
  error: null
};

export const registerAsync = createAsyncThunk(
  'register',
  async (values: RegisterFormValues) => {
    const response = await axios.post('/api/users/register', { values });
    return response.data;
  }
);

export const loginAsync = createAsyncThunk(
  'login',
  async (values: LoginFormValues) => {
    const response = await axios.post('/api/login', { email: values.email, password: values.password });
    return response.data;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    loggedIn: (state, action) => {
      state.loggedIn = true;
      state.user = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(registerAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(registerAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedIn = true;
        state.user = action.payload;
      })
      .addCase(registerAsync.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedIn = true;
        state.user = action.payload;
      })
      .addCase(loginAsync.rejected, (state, { payload }) => {
        state.status = 'failed';
        state.error = payload;
      })
  },
});

export const { loggedIn, } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUsername = (state: RootState) => state.user.user.username;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (user: User): AppThunk =>
  (dispatch) => {
      dispatch(loggedIn(user));
  };

export default userSlice.reducer;