import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AppThunk } from './store';
import { LoginFormValues, RegisterFormValues, User, UserProfile } from '../utils/Types';
import axios from 'axios';

export interface userState {
  loggedIn: boolean;
  register_status: string | null,
  login_status: string | null,
  getUser_status: string | null,
  user: UserProfile,
  error: {} | null | unknown
}

const initialState: userState = {
  loggedIn: false,
  register_status: null,
  login_status: null,
  getUser_status: null,
  user: {
    first_name:  null,
    last_name: null,
    email: null,
    birthday: null,
    loyalty_acct: null
  },
  error: null
};

//THUNKS

export const registerAsync = createAsyncThunk(
  'register',
  async (values: RegisterFormValues) => {
    const response = await axios.post('/api/users/register', { values });
    return response.data;
  }
);

export const loginAsync = createAsyncThunk(
  'login',
  async (values: LoginFormValues) => {
    const response = await axios.post('/api/login', { email: values.email, password: values.password });
    return response.data;
  }
);

export const getUserProfileAsync = createAsyncThunk(
  'profile',
  async () => {
    const response = await axios.get('/api/users/account', { withCredentials: true });
    return response.data
  }
)

//USER SLICE
export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    loggedIn: (state, action) => {
      state.loggedIn = true;
      state.user = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
    //REGISTER USER
      .addCase(registerAsync.pending, (state) => {
        state.register_status = 'loading';
      })
      .addCase(registerAsync.fulfilled, (state, action) => {
        state.register_status = 'fulfilled';
        state.loggedIn = true;
        state.user = action.payload;
      })
      .addCase(registerAsync.rejected, (state) => {
        state.register_status = 'failed';
      })
      // LOGIN USER
      .addCase(loginAsync.pending, (state) => {
        state.login_status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.login_status = 'fulfilled';
        state.loggedIn = true;
        state.user = action.payload;
      })
      .addCase(loginAsync.rejected, (state, { payload }) => {
        state.login_status = 'failed';
        state.error = payload;
      })
      //GET USER PROFILE
      .addCase(getUserProfileAsync.pending, (state) => {
        state.getUser_status = 'loading';
      })
      .addCase(getUserProfileAsync.fulfilled, (state, { payload }) => {
        state.getUser_status = 'fulfilled';
        state.user = payload;
      })
      .addCase(getUserProfileAsync.rejected, (state) => {
        state.getUser_status = 'failed';
      })
  },
});

export const { loggedIn, } = userSlice.actions;

export const incrementIfOdd =
  (user: User): AppThunk =>
  (dispatch) => {
      dispatch(loggedIn(user));
  };

export default userSlice.reducer;