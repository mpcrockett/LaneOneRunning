import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AppThunk } from './store';
import { LoginFormValues, RegisterFormValues, User, UserProfile } from '../utils/Types';
import axios from 'axios';

export type cartItem = {
  item_id: number,
  product_id: number,
  name: string,
  brand: string,
  size: string,
  color: string,
  quantity: number
  url: string
}
export interface cartState {
  items: Array<cartItem>,
  addStatus: string | null;
}

const initialState: cartState = {
  items: [],
  addStatus: null
};

//THUNKS

// export const addToCartAsync = createAsyncThunk(
//   'addToCart',
//   async (item: cartItem) => {
//     const response = await axios.post(`/api/products/${item.product_id}/items/add-to-cart`, item, { withCredentials: true });
//     return response.data;
//   }
// );

// export const loginAsync = createAsyncThunk(
//   'login',
//   async (values: LoginFormValues) => {
//     const response = await axios.post('/api/login', { email: values.email, password: values.password });
//     return response.data;
//   }
// );

// export const getUserProfileAsync = createAsyncThunk(
//   'profile',
//   async () => {
//     const response = await axios.get('/api/users/account', { withCredentials: true });
//     return response.data
//   }
// );

// export const logOutUserAsync = createAsyncThunk(
//   'logOut',
//   async () => {
//     const response = await axios.delete('/api/login', { withCredentials: true });
//     console.log(response.data)
//     return response.data
//   }
// )

//USER SLICE 
export const cartSlice = createSlice({
  name: 'cart',
  initialState,
  reducers: {
    addToCart: (state, action) => {
      state.items.push(action.payload);
    },
    removeFromCart: (state, action) => {
      state.items = state.items.filter((item) => item.item_id !== action.payload);
    },
    updateQuantity: (state, action) => {
      const newItems = state.items.map((item) => {
        if(item.item_id === action.payload.item_id) {
          return {...item, quantity: action.payload.quantity}
        } else {
          return item
        }
      });
      state.items = newItems;
    },
    clearCart: (state) => {
      state = initialState;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //   //REGISTER USER
  //     .addCase(addToCartAsync.pending, (state) => {
  //       state.addStatus = 'loading';
  //     })
  //     .addCase(addToCartAsync.fulfilled, (state, action) => {
  //       state.addStatus = 'fulfilled';
  //       state.items.push(action.payload);
  //     })
  //     .addCase(addToCartAsync.rejected, (state) => {
  //       state.addStatus = 'failed';
  //     })
  // },
});

export const { addToCart, removeFromCart, updateQuantity, clearCart } = cartSlice.actions;


export default cartSlice.reducer;